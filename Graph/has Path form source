//time complexity o(v+e)
// has path from given source to destination using bfs
import java.util.*;
class Solution {
    static Scanner sc=new Scanner(System.in);
    public static boolean bfs(int edges[][],int sv,int ev,boolean visited[]){
        if(sv>(edges.length-1) || ev>(edges.length-1)){
            return false;
        }
        if(edges[sv][ev]==1){
            return true;
        }
        Queue<Integer>queue=new LinkedList<>();
        visited[sv]=true;
        queue.add(sv);
        while(queue.isEmpty()){
            int front=queue.remove();
            for(int i=0;i<edges.length;i++){
                if(edges[front][i]==1 && !visited[i]){
                    if(i==ev){
                        return true;
                    }else{
                        visited[i]=true;
                        queue.add(i);
                    }
                }
            }
        }
        return false;
    }
    private static boolean haspath(int edges[][],int sv,int ev){
        boolean visited[]=new boolean[edges.length];
        return bfs(edges,sv,ev,visited);
    }

}