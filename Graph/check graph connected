

// check that graph is connected or not using Dfs
import java.util.Scanner;
class Solution {
    public static void dfstraversal(int adjMatrix[][],int currentVertex,boolean visited[]){
        visited[currentVertex]=true;
        for(int i=0;i<adjMatrix.length;i++){
            if(adjMatrix[currentVertex][i]==1 && visited[i]==false){
                //i is neighbor of currentVertex
                dfstraversal(adjMatrix,i,visited);
                visited[i]=true;
            }
        }
    }
    public static boolean isConnected(int adjMatrix[][]){
        boolean visited[]=new boolean[adjMatrix.length];
        dfstraversal(adjMatrix,0,visited);
        for(int i=0;i<adjMatrix.length;i++){
            if(!visited[i]){
               return false;    
            }
        }
        return true;
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int e=sc.nextInt();
        int adjMatrix[][]=new int[n][n];
        for(int i=0;i<e;i++){
            int v1=sc.nextInt();
            int v2=sc.nextInt();
            adjMatrix[v1][v2]=1;
            adjMatrix[v2][v1]=1;
        }
        isConnected(adjMatrix);
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<n;j++){
        //         System.out.print(adjMatrix[i][j]+" ");
        //     }
        //     System.out.println();
        // }
    }
}