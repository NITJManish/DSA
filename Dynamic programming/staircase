## A child is running up a staircase with n steps and can hop either
 1 step, 2 steps, or 3 steps at a time. Implement a method to
  count how many possible ways the child can run up the stairs.


Input : 4
Output : 7
Explanation:
Below are the seven ways
 1 step + 1 step + 1 step + 1 step
 1 step + 2 step + 1 step
 2 step + 1 step + 1 step 
 1 step + 1 step + 2 step
 2 step + 2 step
 3 step + 1 step
 1 step + 3 step

Input : 3
Output : 4
Explanation:
Below are the four ways
 1 step + 1 step + 1 step
 1 step + 2 step
 2 step + 1 step
 3 step

 //using recursion
 public class Solution {
 
    // Returns count of ways to reach
    // n-th stair using 1 or 2 or 3 steps.
    public static int staircase(int n)
    {
        if ( n == 0)
            return 1;
        else if (n < 0)
            return 0;
 
        else
            return staircase(n - 1) + staircase(n - 2)
                + staircase(n - 3);
    }
 
    // Driver function
    public static void main(String argc[])
    {
        int n = 4;
        System.out.println(staircase(n));
    }
}

//using Memoization
import java.util.Scanner;
public class Fibonacci {
public static int staircase(int n,int dp[]) {
if(n==0)
{
return 1;
}
if(n<0){
    return 0;
}
int ans1,ans2,ans3;
if(dp[n-1] == -1){
ans1 = staircase(n-1,dp);
dp[n-1] = ans1;
}
else{
ans1 = dp[n-1];
}
if(dp[n-2] == -1){
ans2 = staircase(n-2,dp);
dp[n-2] = ans2;
}
else{
ans2 = dp[n-2];
}
if(dp[n-3] == -1){
    ans3 = staircase(n-3,dp);
    dp[n-3] = ans3;
    }
    else{
    ans3 = dp[n-3];
    }
int myAns = ans1 + ans2 + ans3;
return myAns;
}
public static void main(String[] args) {
Scanner s = new Scanner(System.in);
int n = s.nextInt();
int[] dp = new int[n+1];
for(int i=0;i<dp.length;i++) {
dp[i] = -1;
}
int ans = staircase(n,dp);
System.out.println(ans);
}
}

//using Dp Iteration 
import java.lang.*;
import java.util.*;
 
public class GfG {
 
    // A recursive function used by countWays
    public static int staircase(int n)
    {
        int[] res = new int[n + 1];
        res[0] = 1;
        res[1] = 1;
        res[2] = 2;
 
        for (int i = 3; i <= n; i++)
            res[i] = res[i - 1] + res[i - 2] + res[i - 3];
 
        return res[n];
    }
 
    // Driver function
    public static void main(String argc[])
    {
        int n = 4;
        System.out.println(staircase(n));
    }
}