## A thief robbing a store can carry a maximal weight of W into his knapsack. There are N items, and i-th item weigh 'Wi' and the value being 'Vi.' What would be the maximum value V, that the thief can steal?

Sample Input 1 :
4
1 2 4 5
5 4 8 6
5
Sample Output 1 :
13
Sample Input 2 :
5
12 7 11 8 9
24 13 23 15 16
26
Sample Output 2 :
51

//using resursion
public class Knapsack {

    // Function to return the maximum value that can be put in a knapsack of capacity W
    public static int knapSack(int W, int[] wt, int[] val, int n) {
        // Base Case
        if (n == 0 || W == 0)
            return 0;

        // If weight of the nth item is more than Knapsack capacity W, then this item cannot be included in the optimal solution
        if (wt[n - 1] > W)
            return knapSack(W, wt, val, n - 1);

        // Return the maximum of two cases:
        // (1) nth item included
        // (2) not included
        else
            return Math.max(val[n - 1] + knapSack(W - wt[n - 1], wt, val, n - 1),
                            knapSack(W, wt, val, n - 1));
    }

    public static void main(String[] args) {
        int[] val = {60, 100, 120};
        int[] wt = {10, 20, 30};
        int W = 50;
        int n = val.length;
        System.out.println(knapSack(W, wt, val, n)); // Output should be 220
    }
}

//using memoization 

import java.util.Arrays;

public class KnapsackMemoization {

    // Function to return the maximum value that can be put in a knapsack of capacity W
    public static int knapSack(int W, int[] wt, int[] val, int n) {
        int[][] memo = new int[n + 1][W + 1];
        for (int[] row : memo) {
            Arrays.fill(row, -1);
        }
        return knapSackHelper(W, wt, val, n, memo);
    }

    // Helper function with memoization
    private static int knapSackHelper(int W, int[] wt, int[] val, int n, int[][] memo) {
        // Base Case
        if (n == 0 || W == 0)
            return 0;

        // Check if value is already computed
        if (memo[n][W] != -1)
            return memo[n][W];

        // If weight of the nth item is more than Knapsack capacity W, then this item cannot be included in the optimal solution
        if (wt[n - 1] > W) {
            memo[n][W] = knapSackHelper(W, wt, val, n - 1, memo);
        } else {
            // Return the maximum of two cases:
            // (1) nth item included
            // (2) not included
            memo[n][W] = Math.max(val[n - 1] + knapSackHelper(W - wt[n - 1], wt, val, n - 1, memo),
                                  knapSackHelper(W, wt, val, n - 1, memo));
        }
        return memo[n][W];
    }

    public static void main(String[] args) {
        int[] val = {60, 100, 120};
        int[] wt = {10, 20, 30};
        int W = 50;
        int n = val.length;
        System.out.println("Maximum value in knapsack: " + knapSack(W, wt, val, n)); // Output should be 220
    }
}


//Iteration
public class KnapsackIterative {

    // Function to return the maximum value that can be put in a knapsack of capacity W
    public static int knapSack(int W, int[] wt, int[] val, int n) {
        int[][] dp = new int[n + 1][W + 1];

        // Build table dp[][] in bottom up manner
        for (int i = 0; i <= n; i++) {
            for (int w = 0; w <= W; w++) {
                if (i == 0 || w == 0) {
                    dp[i][w] = 0;
                } else if (wt[i - 1] <= w) {
                    dp[i][w] = Math.max(val[i - 1] + dp[i - 1][w - wt[i - 1]], dp[i - 1][w]);
                } else {
                    dp[i][w] = dp[i - 1][w];
                }
            }
        }

        return dp[n][W];
    }

    public static void main(String[] args) {
        int[] val = {60, 100, 120};
        int[] wt = {10, 20, 30};
        int W = 50;
        int n = val.length;
        System.out.println("Maximum value in knapsack: " + knapSack(W, wt, val, n)); // Output should be 220
    }
}

