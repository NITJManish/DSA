## Build a Matrix With Conditions
Hard
Topics
Companies
Hint
You are given a positive integer k. You are also given:

a 2D integer array rowConditions of size n where rowConditions[i] = [abovei, belowi], and
a 2D integer array colConditions of size m where colConditions[i] = [lefti, righti].
The two arrays contain integers from 1 to k.

You have to build a k x k matrix that contains each of the numbers from 1 to k exactly once. 
The remaining cells should have the value 0.

The matrix should also satisfy the following conditions:

The number abovei should appear in a row that is strictly above the row at
 which the number belowi appears for all i from 0 to n - 1.
The number lefti should appear in a column that is strictly left of the column
 at which the number righti appears for all i from 0 to m - 1.
Return any matrix that satisfies the conditions. If no answer exists, return an empty matrix.



Example 1:


Input: k = 3, rowConditions = [[1,2],[3,2]], colConditions = [[2,1],[3,2]]
Output: [[3,0,0],[0,0,1],[0,2,0]]
Explanation: The diagram above shows a valid example of a matrix that satisfies all the conditions.
The row conditions are the following:
- Number 1 is in row 1, and number 2 is in row 2, so 1 is above 2 in the matrix.
- Number 3 is in row 0, and number 2 is in row 2, so 3 is above 2 in the matrix.
The column conditions are the following:
- Number 2 is in column 1, and number 1 is in column 2, so 2 is left of 1 in the matrix.
- Number 3 is in column 0, and number 2 is in column 1, so 3 is left of 2 in the matrix.
Note that there may be multiple correct answers.
Example 2:

Input: k = 3, rowConditions = [[1,2],[2,3],[3,1],[2,3]], colConditions = [[2,1]]
Output: []
Explanation: From the first two conditions, 3 has to be below 1 but the third conditions needs 3 to be above 1 to be satisfied.
No matrix can satisfy all the conditions, so we return the empty matrix.
 

 Intuition
The problem can be viewed as a topological sorting problem. We need to order the rows and columns such that the conditions given in rowConditions and colConditions are met. This can be achieved by treating the conditions as directed edges in a graph and performing a topological sort.

Approach
Graph Construction:

Construct a graph for row conditions and another graph for column conditions.
Nodes represent the numbers from 1 to k.
Directed edges represent the conditions, e.g., rowConditions[i] = [a, b] implies an edge from a to b.
Topological Sorting:

Perform topological sorting on both graphs to determine the order of rows and columns.
Use Depth First Search (DFS) for topological sorting and detect any cycles which would make it impossible to satisfy the conditions.
Matrix Construction:

Using the order obtained from the topological sort, place each number from 1 to k in the corresponding position in the k x k matrix.
Validation:

If any cycle is detected during the topological sorting, return an empty matrix as it indicates that it is impossible to satisfy all conditions.
Complexity
Time Complexity:

Constructing the graph: O(n + m), where n and m are the lengths of rowConditions and colConditions respectively.
Topological Sorting: O(k + n) for rows and O(k + m) for columns.
Matrix construction: O(k^2).
Space Complexity:

Graph storage: O(k + n) for rows and O(k + m) for columns.
Additional space for topological sorting: O(k).
Matrix storage: O(k^2).

import java.util.*;

class Solution {
    public int[][] buildMatrix(int k, int[][] rowConditions, int[][] colConditions) {
        // Initialize the adjacency list for row conditions
        List<Integer>[] rowGraph = new ArrayList[k + 1]; 
        for(int i = 1 ; i < rowGraph.length; i ++) {
            rowGraph[i] = new ArrayList<>();
        }
        // Build the row graph from the rowConditions
        for(int [] rowCondition : rowConditions){ 
            rowGraph[rowCondition[0]].add(rowCondition[1]); 
        }

        // Initialize the adjacency list for column conditions
        List<Integer>[] colGraph = new ArrayList[k + 1]; 
        for(int i = 1 ; i < colGraph.length; i ++) {
            colGraph[i] = new ArrayList<>();
        }
        // Build the column graph from the colConditions
        for(int [] colCondition : colConditions){
            colGraph[colCondition[0]].add(colCondition[1]); 
        }

        // Array to track the visited status for row graph nodes
        int[] visited = new int[k + 1];
        // Deque to store the topological order of the nodes
        Deque<Integer> queue = new LinkedList<>(); 
        // Perform topological sort for each node in the row graph
        for(int i = 1; i < rowGraph.length; i++){ 
            if(!topSort(rowGraph, i, visited, queue)){
                // If a cycle is detected, return an empty matrix
                return new int[0][0];
            }
        }

        // Map to store the row index of each number
        int[] rowIndexMap = new int[k + 1]; 
        for(int i = 0; i < k; i++){ 
            // Poll nodes from the deque to get the topological order
            int node = queue.pollLast(); 
            rowIndexMap[node] = i;
        }

        // Reset visited array for column graph processing
        visited = new int[k + 1];
        queue = new LinkedList<>();
        // Perform topological sort for each node in the column graph
        for(int i = 1; i < colGraph.length; i++){
            if(!topSort(colGraph, i, visited, queue)){
                // If a cycle is detected, return an empty matrix
                return new int[0][0];
            }
        }

        // Array to store the column order of the nodes
        int[] colOrder = new int[k];
        // Map to store the column index of each number
        int[] colIndexMap = new int[k+1];
        for(int i = 0; i < k; i++){
            // Poll nodes from the deque to get the topological order
            int node = queue.pollLast();
            colOrder[i] = node;
            colIndexMap[node] = i;
        }

        // Initialize the result matrix
        int[][] result = new int[k][k];
        // Place each number in the matrix based on its row and column indices
        for(int i = 1; i <= k; i++){
            result[rowIndexMap[i]][colIndexMap[i]] = i;
        }

        return result;
    }

    // Helper method to perform topological sorting
    public boolean topSort(List<Integer>[] graph, int node, int[] visited, Deque<Integer> queue){
        // If the node is currently being visited, a cycle is detected
        if(visited[node] == 2) {
            return false;
        }
        // If the node has not been visited yet
        if(visited[node] == 0){
            visited[node] = 2; // Mark the node as being visited
            for(int child : graph[node]){
                // Recursively visit all children
                if(!topSort(graph, child, visited, queue)){
                    return false;
                }
            }
            visited[node] = 1; // Mark the node as fully visited
            queue.add(node); // Add the node to the deque
        }
        return true;
    }
}
