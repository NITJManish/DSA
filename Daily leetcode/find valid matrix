## Find Valid Matrix Given Row and Column Sums
You are given two arrays rowSum and colSum of non-negative integers where rowSum[i] is the sum of
 the elements in the ith row and colSum[j] is the sum of the elements of the jth column of a 2D matrix.
  In other words, you do not know the elements of the matrix, but you do know the sums of each row and column.

Find any matrix of non-negative integers of size rowSum.length x colSum.length that satisfies the rowSum 
and colSum requirements.

Return a 2D array representing any matrix that fulfills the requirements. It's guaranteed that 
at least one matrix that fulfills the requirements exists.


Intuition
The problem requires constructing a 2D matrix such that the sums of each row and
 column match given arrays rowSum and colSum. To achieve this, the solution should distribute 
 values across the matrix while ensuring that each row and column sum adheres to the specified totals.

Approach
Initialize Variables:

Create a matrix result with dimensions equal to the lengths of rowSum and colSum.
Use two pointers i and j to keep track of the current row and column being processed.
Iterate Through Rows and Columns:

In a loop, while both pointers i and j are within the bounds of their respective arrays:
Determine the minimum value between rowSum[i] and colSum[j].
Assign this minimum value to result[i][j].
Subtract this value from both rowSum[i] and colSum[j].
Adjust Pointers:

If rowSum[i] becomes zero, move to the next row by incrementing i.
If colSum[j] becomes zero, move to the next column by incrementing j.
Return the Matrix:

Once all elements are processed, return the constructed matrix.
Complexity
Time Complexity:

The algorithm processes each element of the rowSum and colSum arrays exactly once. 
Thus, the time complexity is (O(m + n)), where (m) is the length of rowSum and (n) is the length of colSum.
Space Complexity:

The space complexity is (O(m x n)) for the result matrix.


class Solution {
    public int[][] restoreMatrix(int[] rowSum, int[] colSum) {
        int numrows = rowSum.length;
        int colrows = colSum.length;
        int[][] result = new int[numrows][colrows];

        int i=0,j=0;

        while(i<numrows && j<colrows){
            int val = Math.min(rowSum[i], colSum[j]);
            result[i][j] = val;
            rowSum[i] -= val;
            colSum[j] -= val;

            if(rowSum[i] == 0){
                i++;
            }
            if(colSum[j] == 0){
                j++;
            }
        }
        return result;
    }
}