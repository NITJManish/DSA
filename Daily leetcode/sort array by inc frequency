
1636. Sort Array by Increasing Frequency
Solved
Easy
Topics
Companies
Hint
Given an array of integers nums, sort the array in increasing order based on the frequency of the values.
 If multiple values have the same frequency, sort them in decreasing order.

Return the sorted array.

 

Example 1:

Input: nums = [1,1,2,2,2,3]
Output: [3,1,1,2,2,2]
Explanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.
Example 2:

Input: nums = [2,3,1,3,2]
Output: [1,3,3,2,2]
Explanation: '2' and '3' both have a frequency of 2, so they are sorted in decreasing order.
Example 3:

Input: nums = [-1,1,-6,4,5,-6,1,4,1]
Output: [5,-1,4,4,-6,-6,1,1,1]




class Solution {
    // Inner class to hold a pair of number and its frequency
    class Pair {
        int num;  // The number
        int freq; // The frequency of the number
        
        Pair(int num, int freq) {
            this.num = num;
            this.freq = freq;
        }
    }

    public int[] frequencySort(int[] nums) {
        // Step 1: Create a hashmap to store the frequency of each number
        HashMap<Integer, Integer> h = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            h.put(nums[i], h.getOrDefault(nums[i], 0) + 1);
        }

        // Step 2: Create a priority queue (min-heap) that sorts pairs based on frequency,
        // and for equal frequencies, sorts by the number in descending order.
        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> a.freq == b.freq ? b.num - a.num : a.freq - b.freq);
        
        // Step 3: Add all entries from the hashmap to the priority queue as Pair objects
        for (int i : h.keySet()) {
            pq.add(new Pair(i, h.get(i)));
        }

        // Step 4: Create the result array
        int arr[] = new int[nums.length];
        int j = 0;

        // Step 5: Poll from the priority queue and fill the result array
        while (!pq.isEmpty()) {
            int n = pq.peek().num; // Number
            int f = pq.peek().freq; // Frequency
            pq.poll();
            // Add the number 'f' times to the result array
            for (int i = 0; i < f; i++) {
                arr[j] = n;
                j++;
            }
        }

        // Step 6: Return the sorted array
        return arr;
    }
}
