Given a 1-based indexing array arr[] of non-negative integers and an integer sum. 
You mainly need to return the left and right indexes(1-based indexing) of that subarray.
 In case of multiple subarrays, return the subarray indexes which come first on moving from left to right. 
 If no such subarray exists return an array consisting of element -1.



  public static ArrayList<Integer> subarraySum(int[] arr, int n, long sum) {
        int last = 0;
        int start = 0;
        long currsum = 0;
        boolean flag = false;
        ArrayList<Integer> res = new ArrayList<>();

        // Iterate over the array
        for (int i = 0; i < n; i++) {
            // Store sum up to current element
            currsum += arr[i];

            // Check if current sum is greater than or equal to given number
            if (currsum >= sum) {
                last = i;

                // Start from starting index till current index
                while (sum < currsum && start < last) {
                    // Subtract the element from left
                    currsum -= arr[start];
                    ++start;
                }

                // If current sum becomes equal to given number
                if (currsum == sum) {
                    res.add(start + 1);
                    res.add(last + 1);
                    flag = true;
                    break;
                }
            }
        }

        // If no subarray is found, store -1 in result
        if (!flag)
            res.add(-1);

        // Return the result
        return res;
    }



    Time Complexity: O(N), where N is the length of input array
Auxiliary Space: O(1). Since no extra space has been taken.

