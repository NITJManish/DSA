162. Find Peak Element
Medium
Topics
Companies
A peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.

//General binary search in Java

We want to check mid and mid+1 elements. if(nums[mid] < nums[mid+1]), lo = mid + 1, otherwise hi = mid. The reason is that when there are even or odd number of elements, the mid element is always going to have a next one mid+1. We don't need to consider the case when there is less than 1 element as it is not valid case for this problem. Finally we return lo as it will always be a solution since it goes to mid+1 element in the first case, which is larger.

public int findPeakElement(int[] nums) {
    int n = nums.length;
    int lo = 0, hi = n - 1;
    while(lo < hi) {
        int mid = lo + (hi - lo) / 2;
        if(nums[mid] < nums[mid+1]) {
            lo = mid + 1; 
        } else {
            hi = mid;
        }
    }
    return lo;
}

